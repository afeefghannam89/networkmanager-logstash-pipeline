filter {

#  device (ens192): state change: disconnected -> prepare (reason 'none', sys-iface-state: 'managed')
#  device (ens192): state change: unavailable -> disconnected (reason 'none', sys-iface-state: 'managed')
#  device (ens161): state change: unmanaged -> unavailable (reason 'managed', sys-iface-state: 'external')
#  device (ens192): state change: config -> ip-config (reason 'none', sys-iface-state: 'managed')
#  device (ens192): Activation: successful, device activated
#  device (ens192): state change: ip-config -> ip-check (reason 'none', sys-iface-state: 'managed')
#  device (ens192): state change: ip-check -> secondaries (reason 'none', sys-iface-state: 'managed')
#  device (ens192): state change: secondaries -> activated (reason 'none', sys-iface-state: 'managed')
#  device (lo): carrier: link connected
#  device (ens192): Activation: starting connection 'ens192' (8f8725cd-806d-43a7-968f-68eb907d69c0)
  if [message] =~ /^device/ {
    grok {
      match => ["message","device \(%{DATA:[interface][name]}\): %{DATA:[network_manager][action]}: %{GREEDYDATA:[network_manager][action][result]}"]
      id => "nm_device_state"
      tag_on_failure => ["_grokparsefaillure","nm_device_state_grok_failed"]
    }
  }

# Loaded device plugin: NMTeamFactory (/usr/lib64/NetworkManager/1.30.0-7.el8/libnm-device-plugin-team.so)
  if [message] =~ /^Loaded device plugin/ {
    grok {
      match => ["message","Loaded device plugin: %{DATA:[nic][plugin_name]} \(%{DATA:[plugin][path]}\)"]
      id => "loading_nic_device_plugin"
      tag_on_failure => ["_grokparsefaillure","loading_nic_device_plugin_grok_failed"]
    }
  }

# dhcp4 (eth0): state changed extended -> extended, address=10.60.57.244
# dhcp4 (eth0): state changed new lease, address=0.0.0.0
# dhcp4 (eth0): activation: beginning transaction (timeout in 45 seconds)
  if [message] =~ /^dhcp4/ {
    grok {
      match => ["message","%{DATA:[network][type]} \(%{DATA:[interface][name]}\): %{GREEDYDATA:[@metadata][dhcp4]"]
      id => "nm_dhcp"
      tag_on_failure => ["_grokparsefaillure","nm_dhcp_failed"]
    }
    if [@metadata][dhcp4] =~ /^state changed/ {
      grok {
        match => ["[@metadata][dhcp4]","%{DATA:[network_manager][action]}( \-> %{DATA:[network_manager][action][result]})?\, address\=%{IP:[interface][ip]}"]
        id => "nm_dhcp_state_change"
        tag_on_failure => ["_grokparsefaillure","nm_dhcp_state_failed"]
      }
    } else if [@metadata][dhcp4] =~ /^activation/ {
      grok {
        match => ["[@metadata][dhcp4]","%{DATA:[network_manager][action]}: %{DATA:[network_manager][action][result]} \(timeout in %{POSINT:[network_manager][timeout]:int} seconds\)"]
        id => "nm_activation"
        tag_on_failure => ["_grokparsefaillure","nm_activation_failed"]
      }
    }
  }

}
